#!/usr/bin/env sh
# shellcheck shell=sh disable=SC2039

print_usage() {
  local program="$1"
  local version="$2"
  local author="$3"

  echo "$program $version

    Updates the working copy of this project

    USAGE:
        $program [FLAGS] [OPTIONS] [--] <PROG> [<ARG> ..]

    FLAGS:
        -h, --help      Prints help information
        -V, --version   Prints version information
        -v, --verbose   Prints verbose output

    AUTHOR:
        $author
    " | sed 's/^ \{1,4\}//g'
}

main() {
  set -eu
  if [ -n "${DEBUG:-}" ]; then set -v; fi
  if [ -n "${TRACE:-}" ]; then set -xv; fi

  local program version author root
  program="$(basename "$0")"
  version="0.5.0"
  author="Fletcher Nichol <fnichol@nichol.ca>"

  # shellcheck source=lib/realpath.sh
  . "${0%/*}/../lib/realpath.sh"

  root="$(realpath "${0%/*}/..")"

  # shellcheck source=lib/common.sh
  . "$root/lib/common.sh"

  cli_invoke "$program" "$version" "$author" "$@"
}

cli_invoke() {
  local program version author prefix
  program="$1"
  shift
  version="$1"
  shift
  author="$1"
  shift

  VERBOSE=""

  OPTIND=1
  while getopts "hvV-:" arg; do
    case "$arg" in
      h)
        print_usage "$program" "$version" "$author"
        return 0
        ;;
      v)
        VERBOSE=true
        ;;
      V)
        print_version "$program" "$version" "${VERBOSE:-}"
        return 0
        ;;
      -)
        case "$OPTARG" in
          help)
            print_usage "$program" "$version" "$author"
            return 0
            ;;
          verbose)
            VERBOSE=true
            ;;
          version)
            print_version "$program" "$version" "${VERBOSE:-}"
            return 0
            ;;
          '')
            # "--" terminates argument processing
            break
            ;;
          *)
            print_usage "$program" "$version" "$author" >&2
            fail "invalid argument --$OPTARG"
            ;;
        esac
        ;;
      \?)
        print_usage "$program" "$version" "$author" >&2
        fail "invalid argument; arg=-$OPTARG"
        ;;
    esac
  done
  shift "$((OPTIND - 1))"

  update "$@"
}

update() {
  header "Updating repository checkout"

  need_cmd git

  info "git fetch origin"
  git fetch origin
  info "git rebase origin/master"
  git rebase origin/master

  header "Finished updating"
}

main "$@" || exit 99
